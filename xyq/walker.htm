<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>walker</title>
    <meta content="text/html; charset=GB2312" http-equiv="Content-Type" />

    <script type="text/javascript">
        var Common = {
            getElementPos: function(el) {
                el = this.getItself(el);
                var _x = 0, _y = 0;
                do {
                    _x += el.offsetLeft;
                    _y += el.offsetTop;
                } while (el = el.offsetParent);
                return { x: _x, y: _y };
            },
            getItself: function(id) {
                return "string" == typeof id ? document.getElementById(id) : id;
            },
            getMousePos: function(ev) {
                ev = ev || window.event;
                if (ev.pageX || ev.pageY) {
                    return {
                        x: ev.pageX,
                        y: ev.pageY
                    };
                }

                if (document.documentElement && document.documentElement.scrollTop) {
                    return {
                        x: ev.clientX + document.documentElement.scrollLeft - document.documentElement.clientLeft,
                        y: ev.clientY + document.documentElement.scrollTop - document.documentElement.clientTop
                    };
                }
                else if (document.body) {
                    return {
                        x: ev.clientX + document.body.scrollLeft - document.body.clientLeft,
                        y: ev.clientY + document.body.scrollTop - document.body.clientTop
                    };
                }
            }
        }  
    </script>

    <script type="text/javascript">
        var Class = {
            create: function() {
                return function() { this.init.apply(this, arguments); }
            }
        }
        var Walker = Class.create();
        Walker.prototype = {
            init: function(_src, _walkerSize, initPos) {
                //人物朝向，值与人物图片的行数要对应。譬如说图片第1行是朝向SouthWest的，则this.direction.SouthWest值为1
                this.direction = { SouthEast: 0, SouthWest: 1, NorthEast: 2, NorthWest: 3 };
                this.currentDirection = this.direction.SouthEast; //当前人物朝向
                this.speed = 0.5; //默认速度：每次移动0.5px 通过此和起点终点距离算出移动总次数（总帧数）
                this.walkFlag = this.moveFlag = null;
                this.walkerSize = _walkerSize;
                this.walker = document.createElement("div");
                this.walker.style.cssText = "position:absolute;width:" + this.walkerSize.w + ";height:" + this.walkerSize.h + ";clip:rect(0px " + this.walkerSize.w + "px " + this.walkerSize.h + "px 0px)";
                document.body.appendChild(this.walker);

                this.img = document.createElement("img");
                this.img.src = _src;
                this.img.style.position = "absolute";
                this.walker.appendChild(this.img);

                this.walker.style.left = initPos.x + "px";
                this.walker.style.top = initPos.y + "px";
            },
            setWalkStatus: function(row, col) {//col=0设置为该方向的初始状态。row值与方向direction一致
                this.img.style.left = -col * this.walkerSize.w + "px";
                this.img.style.top = -row * this.walkerSize.h + "px";
            },
            getDirection: function(mousePos) {
                var dir = 0;
                var initPos = Common.getElementPos(this.walker);
                initPos.x = initPos.x + this.walkerSize.w / 2, initPos.y = initPos.y + this.walkerSize.h / 2;
                if (mousePos.y < initPos.y) {//上方
                    if (mousePos.x > initPos.x) { //东北
                        dir = this.direction.NorthEast;
                    }
                    else { //西北
                        dir = this.direction.NorthWest;
                    }
                }
                else { //下方
                    if (mousePos.x > initPos.x) { //东南
                        dir = this.direction.SouthEast;
                    }
                    else { //西南
                        dir = this.direction.SouthWest;
                    }
                }
                this.currentDirection = dir;
            },
            beginWalk: function(mousePos) {
                this.getDirection(mousePos);
                var row = this.currentDirection;
                this.setWalkStatus(row, 1);
                var walkerObj = this;
                var tmp = 1;
                this.walkFlag = setInterval(function() {
                    tmp = tmp > 3 ? 0 : tmp;
                    //walkerObj.img.style.left = -walkerObj.walkerSize.w * tmp + "px";
                    walkerObj.setWalkStatus(row, tmp);
                    tmp++;
                },
                200);
            },
            stopWalk: function() {
                clearInterval(this.walkFlag);
                clearInterval(this.moveFlag);
                this.setWalkStatus(this.currentDirection, 0);
            },
            walk: function(e) {
                //停止当前动作
                this.stopWalk();
                var mousePos = Common.getMousePos(e);
                this.beginWalk(mousePos);
                this.move(this.walker, { x: mousePos.x - this.walkerSize.w / 2, y: mousePos.y - this.walkerSize.h / 2 });
            },
            setDirection: function(e) {
                this.getDirection(Common.getMousePos(e));
                this.setWalkStatus(this.currentDirection, 0);
            },
            timer: 10,
            move: function(obj, targetPos) {
                var currentCount = 0;
                var elPos = Common.getElementPos(obj);
                var initPos = { x: elPos.x, y: elPos.y }
                var distance = Math.sqrt(Math.abs(targetPos.x - initPos.x) * Math.abs(targetPos.x - initPos.x) + Math.abs(targetPos.y - initPos.y) * Math.abs(targetPos.y - initPos.y));
                var count = Math.ceil(distance / this.speed);
                var tmpWalkObj = this;
                var Func = Tween.Linear;
                this.moveFlag = setInterval(function() {
                    if (currentCount > count) {
                        tmpWalkObj.stopWalk();
                    }
                    else {
                        currentCount++;
                        var tmpX = Func(initPos.x, targetPos.x, currentCount, count);
                        var tmpY = Func(initPos.y, targetPos.y, currentCount, count);
                        obj.style.left = tmpX + "px";
                        obj.style.top = tmpY + "px";
                        //清除小数点的误差
                        if (Math.abs(tmpX - targetPos.x) < 1) {
                            obj.style.left = targetPos.x + "px";
                        }
                        if (Math.abs(tmpY - targetPos.y) < 1) {
                            obj.style.top = targetPos.y + "px";
                        }
                        //边界控制
                        if (parseInt(obj.style.left) < 0) {
                            obj.style.left = 0 + "px";
                        }
                        if (parseInt(obj.style.top) < 0) {
                            obj.style.top = 0 + "px";
                        }
                        if (parseInt(obj.style.left) + tmpWalkObj.walkerSize.w > 1024) {//场景图片尺寸：1024*764
                            tmpWalkObj.stopWalk();
                        }
                        if (parseInt(obj.style.top) + tmpWalkObj.walkerSize.h > 764) {
                            tmpWalkObj.stopWalk();
                        }
                    }
                }
                , this.timer);
            }
        }

        var Tween = {
            Linear: function(initPos, targetPos, currentCount, count) {
                var b = initPos, c = targetPos - initPos, t = currentCount, d = count;
                return c * t / d + b;
            }
        }
    </script>

    <script type="text/javascript">
        window.onload = function() {
            var q = new Walker("walker2.png", { w: 70, h: 92 }, { x: 100, y: 50 });
            document.documentElement.onclick = function(e) {
                q.walk(e);
            }
            document.documentElement.oncontextmenu = function(e) {
                if (document.all) {
                    window.event.returnValue = false;
                }
                else {
                    if (e.preventDefault) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                }
                q.setDirection(e);
            }
        }        
    </script>

</head>
<body style="background-image: url(bg.jpg); background-repeat: no-repeat; overflow: auto;">
    <!--<input type="text" id="test" />
    -->
</body>
</html>
